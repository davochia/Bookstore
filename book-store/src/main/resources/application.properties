# server.port=9000
# spring.application.name=book-server
# server.error.include-message=always
# server.error.include-binding-errors=always

# # Database Postgres
# spring.datasource.url=${POSTGRES_HOST}
# spring.datasource.username={POSTGRES_USER}
# spring.datasource.password={POSTGRES_PASSWORD}
# spring.datasource.platform=postgres

# spring.jpa.show-sql=true
# spring.jpa.hibernate.ddl-auto=create
# spring.jpa.defer-datasource-initialization=true

# spring.datasource.driver-class-name=org.postgresql.Driver
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# spring.jpa.properties.hibernate.format_sql=true
# spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true


# #### Postgres Docker image
# ##docker run --name myPostgresDb -p 5432:5432 -e POSTGRES_USER=book-postgres -e POSTGRES_PASSWORD=book-postgres -e POSTGRES_DB=book-postgres-db -d postgres


# ################# Swagger ########################
# springdoc.swagger-ui.path=/swagger-ui.html
# springdoc.swagger-ui.operationsSorter=method

# #UI link to swagger API documentation: http://server:port/context-path/swagger-ui.html or http://server:port/context-path/v3/api-docs


# ################ Prometheus ############################
# management.metrics.tags.application=${spring.application.name}

# management.endpoints.web.exposure.include=*
# management.endpoints.health.show-details=always
# management.endpoints.enabled-by-default=true

# management.health.livenessstate.enabled=true
# management.health.readinessstate.enabled=true
# management.health.enabled=true
# management.endpoints.jmx.exposure.include=health

# management.endpoint.metrics.enabled=true
# management.endpoint.prometheus.enabled=true
# management.metrics.export.prometheus.enabled=true
# management.metrics.web.server.auto-time-requests= true

# management.metrics.distribution.percentiles-histogram.http.server.requests=true
# management.metrics.distribution.percentiles-histogram.http.client.requests=true