version: "3.8"

services:
  # Backend Service
  book-server:
    image: wisekingdavid/bookstore-server:0.1
    container_name: book-server
    ports:
      - "9000:9000"
    depends_on:
      - PostgreSQL
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://PostgreSQL:5432/book-postgres-db
      - SPRING_DATASOURCE_USERNAME=book-postgres
      - SPRING_DATASOURCE_PASSWORD=book-postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SW_AGENT_NAME:book-store
      - SW_AGENT_COLLECTOR_BACKEND_SERVICES:host.docker.internal:11800
    networks:
      - backend
      - frontend

  # Frontend Service
  book-client:
    image: wisekingdavid/bookstore-client:0.1
    container_name: book-client

    ports:
      - "4200:80"

    restart: always
    depends_on:
      - book-server
    networks:
      - frontend

  # UI monitoring
  # nginx-exporter:
  #   image: nginx/nginx-prometheus-exporter:latest
  #   command:
  #     - SCRAPE_URI=http://book-client:4200/metrics
  #   ports:
  #     - "9113:9113"
  #   depends_on:
  #     - book-client
  #   links:
  #     - book-client
  #     - prometheus

  # Database
  PostgreSQL:
    image: postgres
    container_name: book-postgres-db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=book-postgres
      - POSTGRES_PASSWORD=book-postgres
      - POSTGRES_DB=book-postgres-db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  # Postgres monitoring (DASHBOARD- 9628)
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    ports:
      - 9187:9187
    environment:
      DATA_SOURCE_NAME: "postgresql://book-postgres:book-postgres@PostgreSQL:5432/book-postgres-db?sslmode=disable"
    depends_on:
      - PostgreSQL
    links:
      - PostgreSQL
      - prometheus

  # Prometheus - Scraping monitoring data
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./data/prometheus/config/:/etc/prometheus/
    command:
      - "--config.file=/etc/prometheus/prometheus.yaml"
    ports:
      - "9090:9090"
    depends_on:
      - book-server
    networks:
      - backend
      - frontend

  # Grafana - Visualize scraped data from prometheus
  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    user: root
    links:
      - prometheus:prometheus
    volumes:
      - ./data/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=host.docker.internal
      # Enabled for logging
      - GF_LOG_MODE=console file
      - GF_LOG_FILTERS=alerting.notifier.slack:debug alertmanager:debug ngalert:debug
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - backend
      - frontend

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.4.1
    container_name: elasticsearch
    ports:
      - "9200:9200"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail localhost:9200/_cluster/health || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1

  oap:
    image: apache/skywalking-oap-server:9.1.0
    container_name: oap
    links:
      - elasticsearch
    restart: on-failure:5
    ports:
      - "11800:11800"
      - "12800:12800"
    healthcheck:
      test: ["CMD-SHELL", "/skywalking/bin/swctl ch"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      SW_STORAGE: elasticsearch
      SW_STORAGE_ES_CLUSTER_NODES: elasticsearch:9200
      SW_HEALTH_CHECKER: default
      SW_TELEMETRY: prometheus

  ui:
    image: apache/skywalking-ui:9.1.0
    container_name: ui
    links:
      - oap
    ports:
      - "8088:8080"
    environment:
      SW_OAP_ADDRESS: http://oap:12800

networks:
  backend:
  frontend:
